#!/bin/bash

set -eu

declare -a on_exit_hooks

on_exit()
{
    for i in "${on_exit_hooks[@]}"
    do
        eval $i
    done
}

add_on_exit()
{
    local n=${#on_exit_hooks[*]}
    on_exit_hooks[$n]="$*"
    if [[ $n -eq 0 ]]
    then
        trap on_exit EXIT
    fi
}

xe_min()
{
  local cmd="$1"
  shift
  xe "$cmd" --minimal "$@"
}

_no_hosts()
{
  cmd="$1"
  shift
  "$cmd" -o StrictHostKeyChecking=no \
         -o UserKnownHostsFile=/dev/null \
         -o LogLevel=ERROR \
         -i "$keyfile" \
         "$@"
}

ssh_no_hosts()
{
  _no_hosts "ssh" "$@"
}

scp_no_hosts()
{
  _no_hosts "scp" "$@"
}

gen_key()
{
  ssh-keygen -N '' -f "$keyfile" >/dev/null
  add_on_exit "rm -f $keyfile"
  add_on_exit "rm -f $keyfile.pub"
}

upload_key()
{
  host="$1"
  if [ "$password" = '' ]
  then
    cat "$keyfile.pub" | \
      ssh_no_hosts root@$host \
          'mkdir -p /root/.ssh; cat >>/root/.ssh/authorized_keys'
  else
    key=$(cat "$keyfile.pub")
    expect >/dev/null <<EOF -
set timeout -1
spawn ssh -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -o LogLevel=ERROR \
          root@$host \
          mkdir -p /root/.ssh\; echo $key >>/root/.ssh/authorized_keys
match_max 100000
expect {
  "*?assword:*" {
    send -- "$password\r"
    send -- "\r"
    expect eof
  }
  eof {
  }
EOF
  fi
}


BUG_DIR="/var/opt/xen/bug-report"


password=${1:-}


date=$(date +%Y%m%d%H%M%S)
xs=$(hostname)
logfile="$BUG_DIR/os-vpx-bugtool-$xs-$date.log"
output="$BUG_DIR/os-vpx-bugtool-$xs-$date.tar.bz2"

if [ -f ~/.ssh/id_rsa.pub ] && grep -q "OS-VPX devel key" ~/.ssh/id_rsa.pub
then
  devel_key=true
  keyfile=~/.ssh/id_rsa
else
  devel_key=false
  keyfile=$(mktemp)
  rm "$keyfile"
fi

mkdir -p "$BUG_DIR"

exec > >(tee -a "$logfile") 2>&1

echo "Logging collected at $logfile"

if ! $devel_key
then
  gen_key
fi

collected=
vm_uuids=$(xe_min vm-list other-config:os-vpx=true power-state=running | sed -e 's/,/ /g')
for vm_uuid in $vm_uuids
do
  name=$(xe_min vm-list params=name-label uuid="$vm_uuid" | sed -e 's/\\,/,/g')
  networks=$(xe_min vm-list params=networks uuid="$vm_uuid")
  ip_addr=$(echo "$networks" | sed -n "s,^.*0/ip: \([^;]*\).*$,\1,p")
  echo "$name: $ip_addr"
  if ! $devel_key
  then
    upload_key "$ip_addr"
  fi

  echo "Collecting bugtool on $ip_addr..."
  out=$(ssh_no_hosts "$ip_addr" "os-vpx-bugtool --yestoall")
  echo "Collecting bugtool on $ip_addr done."

  tarball=$(echo "$out" | sed -ne 's,Writing tarball \(.*\) successful.,\1,p')
  if [ "$tarball" ]
  then
    tarball_base=$(basename "$tarball")
    echo "Retrieving bugtool $ip_addr:$tarball..."
    scp_no_hosts "$ip_addr:$tarball" "$BUG_DIR"
    collected="$collected $ip_addr=$tarball_base"
    echo "Retrieved bugtool $BUG_DIR/$tarball_base."

    echo "Deleting bugtool $ip_addr:$tarball..."
    ssh_no_hosts "$ip_addr" "rm $tarball"
    echo "Deleting bugtool $ip_addr:$tarball done."
  else
    echo "Failed to collect bugtool.  Output follows:"
    echo "$out"
    echo "Output ends."
  fi
done

if which xen-bugtool >/dev/null 2>&1
then
  echo "Collecting bugtool on the host..."
  out=$(xen-bugtool --yestoall)
  echo "Collecting bugtool on the host done."

  tarball=$(echo "$out" | sed -ne 's,Writing tarball \(.*\) successful.,\1,p')
  if [ "$tarball" ]
  then
    tarball_base=$(basename "$tarball")
    collected="$collected host=$tarball_base"
    echo "Retrieved bugtool $tarball."
  else
    echo "Failed to collect bugtool.  Output follows:"
    echo "$out"
    echo "Output ends."
  fi
fi

echo "Aggregating bugtools..."
staging=$(mktemp -d)
add_on_exit "rm -rf $staging"
for hostfile in $collected
do
  host=$(echo "$hostfile" | cut -d= -f 1)
  file=$(echo "$hostfile" | cut -d= -f 2)
  olddir="${file/.tar.bz2/}"
  newdir="${olddir/bug-report-/bug-report-$xs-$host-}"
  echo "  Unpacking $BUG_DIR/$file..."
  tar -C "$staging" -xjf "$BUG_DIR/$file"
  mv "$staging/$olddir" "$staging/$newdir"
  rm "$BUG_DIR/$file"
  echo "  Unpacked and deleted $BUG_DIR/$file."
done
tar -C "$staging" -cjf "$output" .
echo "Aggregating bugtools done."

echo "Completed bugtool collection: $output."
