#!/usr/bin/env python2.6
# Copyright (c) 2006-2011 Citrix Systems, Inc.
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


import sys
import os_vpx


def find_network_with_bridge(session, bridge):
        expr = 'field "name__label" = "%s" or ' \
               'field "bridge" = "%s"' % (bridge, bridge)
        networks = session.xenapi.network.get_all_records_where(expr)
        if len(networks) == 1:
            return networks.keys()[0]
        elif len(networks) > 1:
            raise Exception('Found non-unique network for bridge %s' % bridge)
        else:
            raise Exception('Found no network for bridge %s' % bridge)


def find_template_with_name(session, name):
        expr = 'field "name__label" = "%s" or ' \
               'field "is_a_template" = "%s"' % (name, True)
        templates = session.xenapi.VM.get_all_records_where(expr)
        if len(templates) == 1:
            return templates.keys()[0]
        elif len(templates) > 1:
            raise Exception('Found non-unique template for name %s' % name)
        else:
            raise Exception('Found no template for name %s' % name)


def main(session, template, mac, bridge):
    # Retrieve network and template and clone VM
    network = find_network_with_bridge(session, bridge)
    template = find_template_with_name(session, template)
    vm = session.xenapi.VM.clone(template, 'NS-VPX')
    # Replace MAC address (for licensing issues)
    vifs = session.xenapi.VM.get_VIFs(vm)
    session.xenapi.VIF.destroy(vifs[0])
    vif = { 'device': '0',
            'network': network,
            'VM': vm,
            'MAC': mac,
            'MTU': "1500",
            "qos_algorithm_type": "",
            "qos_algorithm_params": {},
            "other_config": {} }
    session.xenapi.VIF.create(vif)
    # Provision and start VM

    session.xenapi.VM.provision(vm)
    session.xenapi.VM.start(vm, False, True)


def make_file_note():
    filename = '/var/lib/geppetto/ns-vpx-init-run'
    f = open(filename, 'w')
    f.close()


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print 'Usage: %s ns-vpx-template-name mac-address network-bridge' % sys.argv[0]
        sys.exit(1)
    elif len(sys.argv) == 4:
        template_name = sys.argv[1]
        mac_address = sys.argv[2]
        network_bridge = sys.argv[3]

    session = os_vpx.login()
    try:
        main(session, template_name, mac_address, network_bridge)
        make_file_note()
    except Exception, e:
        print str(e)
        raise
    finally:
        session.logout()
