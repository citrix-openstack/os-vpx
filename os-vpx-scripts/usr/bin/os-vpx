#!/usr/bin/env python2.6

# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright (c) 2011 Citrix Systems, Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import os
import socket
import sys
import xmlrpclib

from geppetto.geppettolib import puppet

# Set connection timeout to 30 secs
socket.setdefaulttimeout(30)

# Set django settings as it's required by service_proxy
os.environ['DJANGO_SETTINGS_MODULE'] = 'geppetto.core'

from geppetto.core.views import service_proxy


if __name__ == "__main__":
    try:
        if len(sys.argv) > 2:
            obj = sys.argv[1]
            method = sys.argv[2]
            print "API Object: %s" % obj
            print "API Method: %s" % method
            parsed_args = []
            for arg in sys.argv[3:]:
                parsed_args.append(eval(str(arg)))
            print "API Argument List: %s" % parsed_args

            try:
                master_fqdn = puppet.PuppetNode().get_puppet_option('server')
            except:
                # fall back on localhost
                master_fqdn = 'localhost'
            proxy = service_proxy.create_proxy(master_fqdn, 8080,
                                               service_proxy.Proxy.Geppetto,
                                               'v1')
            api_call = getattr(proxy, '%s.%s' % (obj, method))
            if len(parsed_args) > 0:
                result = api_call(*parsed_args) or 'ok'
            else:
                result = api_call() or 'ok'
            print 'Result is: %s' % result
        else:
            print >> sys.stderr, "%s: Not enough arguments!" % sys.argv[0]
    except xmlrpclib.ProtocolError, err:
        print >> sys.stderr, "A protocol error occurred"
        print >> sys.stderr, "URL: %s" % err.url
        print >> sys.stderr, "HTTP/HTTPS headers: %s" % err.headers
        print >> sys.stderr, "Error code: %d" % err.errcode
        print >> sys.stderr, "Error message: %s" % err.errmsg
        sys.exit(1)
    except Exception, err:
        print >> sys.stderr, err
        sys.exit(2)
