import atexit
import os
import ConfigParser
import StringIO

import XenAPI


class XapiPasswordUnconfigured(Exception):
    pass


def connection_url():
    if os.access('/etc/openstack/xapi-url', os.F_OK):
        xapi_url_config = parse_config('/etc/openstack/xapi-url')
        return config_get(xapi_url_config, 'XAPI_URL',
                          'http://XAPI_URL_MISSING')
    else:
	# Best-guess for Cowley and below.  This should be handled by eth0
	# bring-up on Oxford and above.
        return 'https://192.168.128.1'


def login(pwd=None):
    url = connection_url()
    config = parse_config('/etc/openstack/hapi')
    username = config_get(config, 'HAPI_USER', 'root')
    password = pwd != None and pwd or config_get(config, 'HAPI_PASS')
    if not password:
        raise XapiPasswordUnconfigured()
    return _login(url, username, password)


def _login(url, username, password):
    session = XenAPI.Session(url)
    session._ServerProxy__transport.user_agent = 'os-vpx/%s' % _version
    session.xenapi.login_with_password(username, password)

    atexit.register(lambda: logout(session))

    return session


def logout(session):
    try:
        session.xenapi.session.logout()
    except:
        pass


def get_vpx_uuid():
    with file('/sys/hypervisor/uuid') as f:
        return f.readline().strip()


def get_vpx_ref(session):
    return session.xenapi.VM.get_by_uuid(get_vpx_uuid())


def parse_config(filename):
    with file(filename) as f:
        lines = f.readlines()
    if not lines or not lines[0]:
        raise Exception('Empty config file %s' % filename)
    if lines[0][0] != '[':
        lines.insert(0, '[DEFAULT]\n')
    config = ConfigParser.SafeConfigParser()
    config.readfp(StringIO.StringIO(''.join(lines)))
    config.filename = filename
    return config


def config_get(config, key, default=None, section='DEFAULT'):
    result = config.has_option(section, key) and \
             config.get(section, key) or \
             default
    if result is None:
        raise Exception('Missing config option %s %s.' % (section, key))
    if result and (result[0] == "'" or result[0] == '"'):
        result = eval(result)
    return result


def config_set(config, key, value, section='DEFAULT'):
    config.set(section, key, value)
    with open(config.filename, 'wb') as configfile:
        config.write(configfile)


_version_config = parse_config('/etc/openstack/vpx-version')
_version = config_get(_version_config, 'VPX_VERSION', 'unknown')
