from os_vpx import printing


CYAN='\033[00;36m'
X='\033[00m'


def pretty_roles(roles, patterns, all_roles, full_names):
    def trim(n):
        if not full_names:
           n = n.replace('citrix-', '')
           n = n.replace('openstack-', '')
           n = n.replace('os-vpx-', '')
        return n
    result = []
    for role in roles:
        if all_roles or role['service']:
            if not role_is_wanted(role, patterns):
                continue
            name = trim(role['name'])
            result.append('%s%s' % (name,
                                    role['_state']['adding'] and '*' or ''))
    return result


def role_is_wanted(role, patterns):
    if patterns == []:
        return True
    name = role['name']
    for pattern in patterns:
        if pattern in name:
            return True
    return False


def print_roles_table(nodes, patterns, all_roles, full_names, scriptable):
    table = []
    for fqdn, details in nodes.iteritems():
        roles = pretty_roles(details['roles'], patterns, all_roles,
                             full_names)
        roles.sort()
        for role in roles:
            table.append([details['id'], fqdn.split('.')[0], role])

    table.sort(lambda x, y: x[0] - y[0])

    last_id = None
    cyan = True
    for row in table:
        if not scriptable and row[0] == last_id:
           row[0] = ''
           row[1] = ''
        else:
           last_id = row[0]
           cyan = not cyan
        if not scriptable and cyan:
           for i in range(0, 3):
               row[i] = '%s%s%s' % (CYAN, row[i], X)

    if not scriptable:
        table.insert(0, ['--', '------------', '-----'])
        table.insert(0, ['ID', 'VPX hostname', 'Roles'])
    printing.columnar_display(table, scriptable=scriptable)
