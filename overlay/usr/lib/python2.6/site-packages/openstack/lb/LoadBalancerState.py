
from openstack.lb.State import State

MAX_NAME_LENGTH = 128 

class LoadBalancerState(State):

    def __init__(self, lbresource):
        State.__init__(self, lbresource)
        self._properties = ["id", "name", "protocol", "port", "algorithm", "status", "maxConcurrentConnections", "connectionLogging",
                            "virtualIps", "nodes", "sessionPersistence", "healthMonitor", "connectionThrottle", "cluster", "created", "updated"]


    def validate_id_value(self):
        """ XXX - No checks made """ 
        return True

    def validate_name_value(self):
        errors = []

        if len(self.name) > MAX_NAME_LENGTH:
            error = "length of \"name\" attribute exceeds maximum of " + str(MAX_NAME_LENGTH)
            errors.append(error) 
            return False, errors
        return True, None


    def validate_protocol_value(self):

        errors = []
 
        lbprotocols = self._lbresource.get_lbprotocols()

        protocolnames = [protocol["name"].lower() for protocol in lbprotocols]
  

        if self.protocol.lower() in protocolnames:
            return True, None

        error = "value for \"protocol\" attribute is invalid"
        errors.append(error) 

        return False, errors


    def validate_algorithm_value(self): 

        errors = []
 
        lbalgorithms = self._lbresource.get_lbalgorithms()

        algorithmnames = [algorithm["name"] for algorithm in lbalgorithms]

        if self.algorithm in algorithmnames:
            return True, None

        error = "value for \"algorithm\" attribute is invalid"
        errors.append(error) 

        return False, errors


    def validate_port_value(self): 

        errors = []

        try:
            i = int(self.port)
        except ValueError:
            
            """ This string is not an integer"""
            error = "illegal value for \"port\" attribute"
            errors.append(error)
            return False, errors

        if i < 0 or i > 65535:
            error = "port value must be in range 0-65535"
            errors.append(error)
            return False, errors


        return True, None

    def validate_status_value(self): 
        """ XXX - No checks made """ 
        return True, None


    def validate_maxConcurrentConnections_value(self):
        """ XXX - No checks made """ 
        return True, None


    def validate_clustername_value(self): 
        """ XXX - No checks made """ 
        return True, None


    def validate_created_value(self):
        """ XXX - No checks made """ 
        return True, None

    def validate_updated_value(self):
        """ XXX - No checks made """ 
        return True, None

    def validate_virtualips_value(self):

        errors = []
   
        if not self.virtualIps:
            error = "virtualIps property empty"
            errors.append(error) 
            return False, errors 

        if not isinstance(self.virtualIps, list):
            error = "virtualIps property must be a list of virtualIP objects"
            errors.append(error) 
            return False, errors 


        return True, None

    def validate_nodes_value(self):

        errors = []
   
        if not self.nodes:
            error = "nodes property empty"
            errors.append(error) 
            return False, errors 


        if not isinstance(self.nodes, list):
            error = "nodes property must be a list of node objects"
            errors.append(error) 
            return False, errors 

        return True, None



