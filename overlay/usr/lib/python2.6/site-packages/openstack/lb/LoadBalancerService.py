from openstack.lb.State import State

from openstack.lb.LoadBalancer import LoadBalancer
from openstack.lb.LBNode import LBNode
from openstack.lb.LBVirtualIP import LBVirtualIP
from openstack.lb.LBSessionPersistence import LBSessionPersistence
from openstack.lb.LBAccessList import LBAccessList
from openstack.lb.LBHealthMonitor import LBHealthMonitor
from openstack.lb.LBConnectionLogging import LBConnectionLogging
from openstack.lb.LBConnectionThrottle import LBConnectionThrottle


class LoadBalancerService(object):

    def __init__(self, connmanager, conf, logger):
        self.logger = logger
        self.conf = conf
        self.connmanager = connmanager
	self.initialize_plurals()
	
        self.logger.debug("conf contains: %s" % repr(self.conf))

        if "cluster" in conf.keys():
            self.cluster = conf["cluster"]
        else:
            self.cluster = None
 


    def initialize_plurals(self):

        self.plurals = {}

        self.plurals["loadBalancer"] = "loadBalancers"
        self.plurals["virtualIp"] = "virtualIps"
        self.plurals["node"] = "nodes"  
        self.plurals["networkItem"] = "networkItems" 
        self.plurals["protocol"] = "protocols" 
        self.plurals["algorithm"] = "algorithms" 



    def process_headers(self, headers):

        reqenv = {}

        format_mimetype = headers.get('Content-Type')
        
        if format_mimetype:
            self.logger.debug("Content-Type header value is:" + format_mimetype)

        if not format_mimetype or 'application/json' in format_mimetype:
            reqenv["request_format"] = 'json'
        else:
            reqenv["request_format"] = 'xml'

        format_mimetype = headers.get('Accept')

        if format_mimetype:
            self.logger.debug("Accept header value is:" + format_mimetype)

        if not format_mimetype or 'application/json' in format_mimetype:
            reqenv["response_format"] = 'json'
        else:
            reqenv["response_format"] = 'xml'

        return reqenv 





    @staticmethod
    def SetUp(logger, configParser):

        lb_conf = dict(configParser.items('lb-server'))

        db_dir = lb_conf['db_dir']
        cluster = lb_conf['cluster']
        vip_pools_str = lb_conf['vip_pools']
        
        vip_pools = vip_pools_str.split(',')

        vip_pools = [s.strip() for s in vip_pools]

        logger.debug("vip_pools: %s" % str(vip_pools))          
     
        logger.debug("db_dir=%s" % db_dir)

        plugin = lb_conf['plugin_name']
        plugin_module = lb_conf['plugin_module']
        plugin_class = lb_conf['plugin_class']

        logger.debug("plugin_name=%s" % plugin)
        logger.debug("plugin_mode=%s" % plugin_module)
        logger.debug("plugin_class=%s" % plugin_class)

        plugin_config =  dict(configParser.items(plugin))
     
        config = {}
        config["plugin"] = plugin_config
        config["db_dir"] = db_dir
        config["cluster"] = cluster

        config["vip_pools"] = []

        for vip_pool in vip_pools:
            pool_item = {}
            pool_item["name"] = vip_pool
            pool_item["config"] = dict(configParser.items(vip_pool))
            config["vip_pools"].append(pool_item)

        logger.debug("config[vip_pools] is %s" % repr(config["vip_pools"]))


        if plugin_config != None:
            plugin_import_call = "from " + plugin_module + " import " + plugin_class
            logger.debug("plugin_import_call=%s" % plugin_import_call)
       
            exec(plugin_import_call)
            plugin_instantiation_call = plugin_class + ".SetUp(logger, config)"
            logger.debug("plugin_instantiation_call=%s" % plugin_instantiation_call)
            lbservice = eval(plugin_instantiation_call)
            logger.debug("plugin instance=%s" % str(lbservice))
 
            if lbservice != None:
                return lbservice


        return None


    def GetLoadBalancer(self):
       return LoadBalancer(lbservice=self)


    def GetLBNode(self):
       return LBNode(lbservice=self)

    def GetLBVirtualIP(self):
       return LBVirtualIP(lbservice=self)

    def GetLBSessionPersistence(self):
       return LBSessionPersistence(lbservice=self)

    def GetLBAccessList(self):
       return LBAccessList(lbservice=self)

    def GetLBHealthMonitor(self):
       return LBHealthMonitor(lbservice=self)

    def GetLBConnectionLogging(self):
       return LBConnectionLogging(lbservice=self)

    def GetLBConnectionThrottle(self):
       return LBConnectionThrottle(lbservice=self)





