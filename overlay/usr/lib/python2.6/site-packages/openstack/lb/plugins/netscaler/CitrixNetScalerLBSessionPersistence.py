from openstack.lb.LBSessionPersistence import LBSessionPersistence
from openstack.lb.plugins.netscaler.NetScalerLBSessionPersistenceState import NetScalerLBSessionPersistenceState

class CitrixNetScalerLBSessionPersistence(LBSessionPersistence):

    def __init__(self, lbservice, lbresource=None):
        LBSessionPersistence.__init__(self, lbservice, lbresource)


    def GetStateObject(self):
        return NetScalerLBSessionPersistenceState(self.lbresource) 


    def Get(self, loadBalancerId): pass

    def Set(self, loadBalancerId, body): pass
        
    def Remove(self, loadBalancerId): pass


    def validate_persistencetype_value(self, sessionpersistence, errors=[]):

        error = LBSessionPersistence.validate_persistencetype_value(self, sessionpersistence)

        if not error:
           return None

        if sessionpersistence.persistenceType == "SOURCE_IP":
            return None
        
        return error

   
    def validate_timeout_value(self, sessionpersistence):

        timeout = sessionpersistence.timeout

        try:
            timeout_val = int(timeout)

            if timeout_val < 0:
                raise Exception("")
        except:
            error = "timeout in sessionpersistence has a non-valid value"
            return error
       
        return None


    def validate_sessionpersistence_object_for_add(self, sessionpersistence):
     
        errors = LBSessionPersistence.validate_sessionpersistence_object_for_add(self,
                                                       sessionpersistence)

        if "timeout" in sessionpersistence:
            error = self.validate_timeout_value(sessionpersistence) 

            if error:
                errors.append(error)

        return errors 




    def validate_sessionpersistence_object_for_update(self, sessionpersistence):


        errors = LBSessionPersistence.validate_sessionpersistence_object_for_update(self, sessionpersistence)
                                                                              
        if "timeout" in sessionpersistence:

            error = self.validate_timeout_value(sessionpersistence) 

            if error:
                errors.append(error)

        return errors 



