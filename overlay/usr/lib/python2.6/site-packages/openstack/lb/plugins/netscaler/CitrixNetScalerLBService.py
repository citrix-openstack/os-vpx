import httplib
import json
import re

from openstack.lb.LoadBalancer import LoadBalancer
from openstack.lb.LBNode import LBNode
from openstack.lb.LBVirtualIP import LBVirtualIP
from openstack.lb.LBSessionPersistence import LBSessionPersistence
from openstack.lb.LBAccessList import LBAccessList
from openstack.lb.LBHealthMonitor import LBHealthMonitor
from openstack.lb.LBConnectionLogging import LBConnectionLogging
from openstack.lb.LBConnectionThrottle import LBConnectionThrottle

from openstack.lb.plugins.netscaler.NitroConnectionManager import NitroConnectionManager

from openstack.lb.plugins.netscaler.CitrixNetScalerLoadBalancer import CitrixNetScalerLoadBalancer
from openstack.lb.plugins.netscaler.CitrixNetScalerLBNode import CitrixNetScalerLBNode
from openstack.lb.plugins.netscaler.CitrixNetScalerLBVirtualIP import CitrixNetScalerLBVirtualIP
from openstack.lb.plugins.netscaler.CitrixNetScalerLBSessionPersistence import CitrixNetScalerLBSessionPersistence
from openstack.lb.plugins.netscaler.CitrixNetScalerLBAccessList import CitrixNetScalerLBAccessList
from openstack.lb.plugins.netscaler.CitrixNetScalerLBHealthMonitor import CitrixNetScalerLBHealthMonitor
from openstack.lb.plugins.netscaler.CitrixNetScalerLBConnectionLogging import CitrixNetScalerLBConnectionLogging
from openstack.lb.plugins.netscaler.CitrixNetScalerLBConnectionThrottle import CitrixNetScalerLBConnectionThrottle
from openstack.lb.plugins.netscaler.NetScalerVirtualIPPool import NetScalerVirtualIPPool

from openstack.common.ServiceUnavailableException import ServiceUnavailableException

from openstack.lb.LoadBalancerService import LoadBalancerService


class CitrixNetScalerLBService(LoadBalancerService):


    def __init__(self, connmanager, conf, logger):

        LoadBalancerService.__init__(self, connmanager, conf, logger)

        if "db_dir" in conf.keys():
            self.db_dir = conf["db_dir"]
        else:
            self.db_dir = None


        if "vip_pools" in conf.keys():
            vip_pools = conf["vip_pools"]
            self.vippool_manager = NetScalerVirtualIPPool(self, vip_pools)
 
        else:
            self.vippool_manager = None

        """ Initialize REST resources exposed by this service """
        self.loadbalancer = None
        self.node = None
        self.virtualIP = None
        self.connectionLogging = None
        self.connectionThrottle = None
        self.accessList = None
        self.sessionPersistence = None
        self.healthMonitor = None   

        self.netscaler_regex = re.compile("netscaler", re.IGNORECASE) 



    @staticmethod
    def SetUp(logger, conf):

        plugin_config = conf["plugin"]

        connmanager = NitroConnectionManager(plugin_config, logger)
        
        logger.debug("Connection Manager is: %s" % repr(connmanager))

        if not connmanager:
            logger.debug("Error: Setting up adaptor failed")
	    raise ServiceUnavailableException("The Load Balancing Service is currently unavailable. Please contact support")

        """"No Error occurred"""
        return CitrixNetScalerLBService(connmanager, conf, logger)




    def process_headers(self, headers):

        reqenv = LoadBalancerService.process_headers(self, headers)     

        lb_extensions = headers.get('X-LB-Extensions')

        reqenv["extensions_enabled"] = False

        if lb_extensions: 
            self.logger.debug("X-LB-Extensions header value is:" + lb_extensions)

            match = self.netscaler_regex.search(lb_extensions)

            if match:
                reqenv["extensions_enabled"] = True  

        return reqenv




    def GetLoadBalancer(self):
       if not self.loadbalancer:
           self.loadbalancer = CitrixNetScalerLoadBalancer(lbservice=self)

       return self.loadbalancer

    def GetLBNode(self):
       if not self.node:
           self.node = CitrixNetScalerLBNode(lbservice=self)

       return self.node

    def GetLBVirtualIP(self):
       if not self.virtualIP:
           self.virtualIP = CitrixNetScalerLBVirtualIP(lbservice=self)

       return self.virtualIP


    def GetLBSessionPersistence(self):
       if not self.sessionPersistence:
           self.sessionPersistence = CitrixNetScalerLBSessionPersistence(lbservice=self)

       return self.sessionPersistence


    def GetLBAccessList(self):
       if not self.accessList:
           self.accessList = LBAccessList(lbservice=self)

       return self.accessList


    def GetLBHealthMonitor(self):
       if not self.healthMonitor:
           self.healthMonitor = CitrixNetScalerLBHealthMonitor(lbservice=self)

       return self.healthMonitor



    def GetLBConnectionLogging(self):
       if not self.connectionLogging:
           self.connectionLogging = CitrixNetScalerLBConnectionLogging(lbservice=self)

       return self.connectionLogging


    def GetLBConnectionThrottle(self):
       if not self.connectionThrottle:
           self.connectionThrottle = CitrixNetScalerLBConnectionThrottle(lbservice=self)

       return self.connectionThrottle



