import httplib
import json


from openstack.common.odict import odict
from openstack.common.utils import shorten_string

from openstack.lb.Utils import Utils

from openstack.lb.LBNode import LBNode

from openstack.lb.plugins.netscaler.NetScalerLBNodeState import NetScalerLBNodeState
from openstack.lb.plugins.netscaler.NitroLBNodeAdapter import NitroLBNodeAdapter

from openstack.common.BadRequestException import BadRequestException
from openstack.common.LoadBalancerFaultException import LoadBalancerFaultException
from openstack.common.ItemNotFoundException import ItemNotFoundException
from openstack.common.ServiceUnavailableException import ServiceUnavailableException


class CitrixNetScalerLBNode(LBNode):

    def __init__(self, lbservice, lbresource=None):
        LBNode.__init__(self, lbservice, lbresource) 

    def init_request_environment(self, req, env):
        LBNode.init_request_environment(self, req, env)
        self.extensions_enabled = self.reqenv["extensions_enabled"]
        self.tenant_id = shorten_string(env['account'])
        self.adapter = NitroLBNodeAdapter(self, self.extensions_enabled)


    def GetStateObject(self):
        return NetScalerLBNodeState(self.lbresource) 

    def GetLBNode(self):

       if self.extensions_enabled:
           return CitrixNetScalerLBNode(lbservice=self.lbservice, lbresource=self.lbresource)
       else:
           return LBNode(lbservice=self.lbservice, lbresource=self.lbresource)



    def init_request_environment(self, req, env):
        LBNode.init_request_environment(self, req, env)
        self.extensions_enabled = self.reqenv["extensions_enabled"]
        self.tenant_id = shorten_string(env['account'])
        self.adapter = NitroLBNodeAdapter(self, self.extensions_enabled)
        self.adapter.extensions_enabled = self.extensions_enabled



    def _check_lbnode_objects_for_add(self, lbnodes):

        error_list = []

        for lbnode in lbnodes:
            errors = self.validate_node_object_for_add(lbnode)
            error_list.extend(errors)

        if error_list:
            raise BadRequestException("Validation fault", "invalid object", error_list)


    def _check_lbnode_object_for_add(self, lbnode):
        error_list = self.validate_node_object_for_add(lbnode)

        if error_list:
            raise BadRequestException("Validation fault", "invalid object", error_list)

    def _check_lbnode_object_for_update(self, lbnode):
        error_list = self.validate_node_object_for_update(lbnode)

        if error_list:
            raise BadRequestException("Validation fault", "invalid object", error_list)





    def ListInternal(self, loadBalancerId):

        return self.adapter.list_LBNodes(self.tenant_id, loadBalancerId) 


    def List(self, req, env, loadBalancerId):

        self.init_request_environment(req, env)

        lbnodes = self.ListInternal(loadBalancerId)

        return self.get_listresponse(lbnodes, req)

        


    def Get(self, req, env, loadBalancerId, nodeId):

        self.init_request_environment(req, env)

        lbnode = self.adapter.get_LBNode(self.tenant_id, loadBalancerId, nodeId)

        return self.get_getresponse(lbnode, req)



    def Add(self, req, env, loadBalancerId, body): 

        self.init_request_environment(req, env)

        lbnodes = self.get_lbnode_objects_from_request(req)

        if isinstance(lbnodes, list): 
            self._check_lbnode_objects_for_add(lbnodes)
            resp_lbnode = self.adapter.add_LBNodes(lbnodes, self.tenant_id, loadBalancerId)  
        else:
            lbnode = lbnodes
            self._check_lbnode_object_for_add(lbnode) 
            resp_lbnode = self.adapter.add_LBNode(lbnode, self.tenant_id, loadBalancerId)  

        return self.get_addresponse(resp_lbnode, req) 
 



    def Update(self, req, env, loadBalancerId, nodeId, body): 

        self.init_request_environment(req, env)

        lbnode = self.get_lbnode_object_from_request(req)

        self._check_lbnode_object_for_update(lbnode)
 
        self.logger.debug("about to dispatch update to adaptor")

        resp_lbnode = self.adapter.update_LBNode(loadBalancerId, nodeId, lbnode, self.tenant_id)  

        return self.get_updateresponse(resp_lbnode, req)



    def Remove(self, req, env, loadBalancerId, nodeId): 

        self.init_request_environment(req, env)

        self.adapter.remove_LBNode(loadBalancerId, nodeId, self.tenant_id)

        return self.get_removeresponse(req)
        



