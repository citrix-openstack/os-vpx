import httplib
import json


from openstack.common.odict import odict
from openstack.common.utils import shorten_string

from openstack.lb.Utils import Utils

from openstack.lb.LBHealthMonitor import LBHealthMonitor

from openstack.lb.LBHealthMonitorState import LBHealthMonitorState
from openstack.lb.plugins.netscaler.NitroLBHealthMonitorAdapter import NitroLBHealthMonitorAdapter

from openstack.common.BadRequestException import BadRequestException
from openstack.common.LoadBalancerFaultException import LoadBalancerFaultException
from openstack.common.ItemNotFoundException import ItemNotFoundException
from openstack.common.ServiceUnavailableException import ServiceUnavailableException



class CitrixNetScalerLBHealthMonitor(LBHealthMonitor):


    def __init__(self, lbservice, lbresource=None):
        LBHealthMonitor.__init__(self, lbservice, lbresource)

    def init_request_environment(self, req, env):
        LBHealthMonitor.init_request_environment(self, req, env)
        self.extensions_enabled = self.reqenv["extensions_enabled"]
        self.tenant_id = shorten_string(env['account'])
        self.adapter = NitroLBHealthMonitorAdapter(self, self.extensions_enabled)


    def GetStateObject(self):
        return NetScalerLBHealthmonitorState(self.lbresource) 

    def GetLBHealthMonitor(self):

       if self.extensions_enabled:
           return CitrixNetScalerLBHealthMonitor(lbservice=self.lbservice, lbresource=self.lbresource)
       else:
           return LBHealthMonitor(lbservice=self.lbservice, lbresource=self.lbresource)



    def _check_healthmonitor_object_for_update(self, lbhealthmonitor):

        error_list = self.validate_healthmonitor_object_for_update(lbhealthmonitor)

        if error_list:
            raise BadRequestException("Validation fault", "invalid object", error_list)




    def Get(self, req, env, loadBalancerId):

        self.init_request_environment(req, env)

        lbhealthmonitor = self.adapter.get_LBHealthMonitor(self.tenant_id, loadBalancerId)

        return self.get_getresponse(lbhealthmonitor, req)



    def Update(self, req, env, loadBalancerId, body): 

        self.init_request_environment(req, env)

        lbhealthmonitor = self.get_lbhealthmonitor_object_from_request(req)

        self._check_healthmonitor_object_for_update(lbhealthmonitor) 
           
        resp_lbhealthmonitor = self.adapter.update_LBHealthMonitor(self.tenant_id, loadBalancerId, lbhealthmonitor)  

        return self.get_updateresponse(resp_lbhealthmonitor, req) 
 

    def Remove(self, req, env, loadBalancerId): 

        self.init_request_environment(req, env)

        self.adapter.remove_LBHealthMonitor(self.tenant_id, loadBalancerId)

        return self.get_removeresponse(req)


