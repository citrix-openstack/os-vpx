from openstack.common.BadRequestException import BadRequestException
from openstack.common.LoadBalancerFaultException import LoadBalancerFaultException
from openstack.common.ItemNotFoundException import ItemNotFoundException
from openstack.common.ServiceUnavailableException import ServiceUnavailableException
from openstack.common.NotImplementedException import NotImplementedException
from openstack.common.ImplementationErrorException import ImplementationErrorException

from openstack.lb.plugins.netscaler.NitroUtils import NitroUtils


class NitroTasks(object):

    def __init__(self, lbservice):
        self.lbservice = self.lbresource.lbservice
        self.logger = self.lbservice.logger 



    @staticmethod
    def extract_lbvserver_object_from_task_list(results, loadBalancerId):

        lbvserver_name = NitroUtils.get_lbvservername_from_loadbalancerid(loadBalancerId)

        for task in results:

            if task["type"] == "lbvserver" and task["operation"] == "GET":
                if task["name"] == lbvserver_name:
                    state = task["result"]
                    """ XXX Nitro bug returns a list of one lbvserver, so workaround here """
                    if isinstance(state, list):
                        return state[0]
                    else:
                        return state
 

        return None 
 
    @staticmethod
    def extract_service_from_task_list(task_list, servicebinding):

        service = None

        servicename = servicebinding["servicename"]

        for task in task_list:
            if task["type"] == "service" and task["operation"] == "GET":
                if task["name"] == servicename:
                    state = task["result"]
                    """ XXX Nitro bug returns a list of one service, so workaround here """
                    if isinstance(state, list):
                        service = state[0]
                    else:
                        service = state

                    break
                  
        return service


    @staticmethod
    def extract_monitor_from_task_list(task_list, monitor_name):

        monitor = None

        for task in task_list:
            if task["type"] == "lbmonitor" and task["operation"] == "GET":
                if task["name"] == monitor_name:
                    state = task["result"]
                    """ XXX Nitro bug returns a list of one monitor, so workaround here """
                    if isinstance(state, list):
                        monitor = state[0]
                    else:
                        monitor = state

                    break
                  
        return monitor

    @staticmethod
    def extract_servicebindings_from_task_list(task_list):
         
        bindings = []

        for task in task_list:

            if task["type"] == "lbvserver_service_binding" and task["operation"] == "GET":
                bindings = task["result"]
                break

        return bindings 
 
         
    @staticmethod
    def extract_services_from_task_list(task_list, servicebindings):

        services = []

        for binding in servicebindings:
            service = NitroTasks.extract_service_from_task_list(task_list, binding)
            if service:  
                services.append(service)

  
        return services


    @staticmethod
    def get_netscaler_getlbvserver_task(loadBalancerId):

        lbvserver_name = NitroUtils.get_lbvservername_from_loadbalancerid(loadBalancerId)

        task = {}
        task["type"] = "lbvserver"
        task["name"] = lbvserver_name
        task["operation"] = "GET"
        task["state"] = None

        return task

 
    @staticmethod
    def get_getlbvserver_task_list(loadBalancerId):

        task_list = []
   
        task = NitroTasks.get_netscaler_getlbvserver_task(loadBalancerId)
        task_list.append(task)
 
        return task_list


    

