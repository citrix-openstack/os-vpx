from webob import Request, Response

from openstack.lb.LBHealthMonitorState import LBHealthMonitorState
from openstack.lb.Utils import Utils

from openstack.common.BadRequestException import BadRequestException


class LBHealthMonitor(object):

    def __init__(self, lbservice, lbresource=None):
        if not lbresource:
            self.lbresource = self

        else:
            self.lbresource = lbresource 

        Utils.init(lbservice)
        self.lbservice = lbservice
        self.logger = self.lbservice.logger  

    def init_request_environment(self, req, env):
        self.reqenv = self.lbservice.process_headers(req.headers)
        self.request_format = self.reqenv["request_format"]
        self.response_format = self.reqenv["response_format"]
        self.xmlnamespace = "http://docs.openstack.org/loadbalancers/api/v1.0"


    def GetStateObject(self):
        return LBHealthMonitorState(self.lbresource) 

    def get_element_stateobject(self, elementname):             

        if elementname == "healthMonitor":
            return self.GetLBHealthMonitor().GetStateObject()
             

        return None



    def get_getresponse(self, lbhealthmonitor, req):

        payload = Utils.get_response_body("healthMonitor", lbhealthmonitor, self)

        self.logger.debug("response payload: %s" % payload)

        response = Response(body=payload, request=req)

        response.status = "200 OK"
        response.content_type = Utils.get_mimetype_from_format(self.response_format)
        response.charset = 'utf8'
                
        return response


    def get_updateresponse(self, lbhealthmonitor, req):


       payload = Utils.get_response_body("healthMonitor", lbhealthmonitor, self)

       response = Response(body=payload, request=req)

       response.status = "202 Accepted"
       response.content_type = Utils.get_mimetype_from_format(self.response_format)
       response.charset = 'utf8'
                
       return response



    def get_removeresponse(self, req):
        response = Response(request=req)

        response.status = "202 Accepted"

        return response

    def validate_healthmonitor_object_for_add(self, healthmonitor):
        return self.validate_healthmonitor_object_for_update(healthmonitor)

    def validate_healthmonitor_object_for_update(self, healthmonitor):
      
        error_list = []

        monitortype = None

        if "type" in healthmonitor:
            if not healthmonitor.type in ["CONNECT", "HTTP", "HTTPS"]:
                error = "healthMonitor type attribute has an invalid value"
                error_list.append(error)
            else:
                monitortype = healthmonitor.type.upper()

 
        if "delay" in healthmonitor:
            delay = healthmonitor.delay

            """Check that delay value is a positive integer """
            try:
                value = int(delay)

                if value < 0:
                    raise ValueError("negative value")
            except:
                error = "healthMonitor delay attribute has an invalid value"
                error_list.append(error)   
            

        if "timeout" in healthmonitor:
            timeout = healthmonitor.timeout

            """Check that timeout value is a positive integer """
            try:
                value = int(timeout)

                if value < 0:
                    raise ValueError("negative value")
            except:
                error = "healthMonitor timeout attribute has an invalid value"
                error_list.append(error)   


        if "attemptsBeforeDeactivation" in healthmonitor:
            attemptsBeforeDeactivation = healthmonitor.attemptsBeforeDeactivation

            """Check that attemptsBeforeDeactivation value is a positive integer """
            try:
                value = int(attemptsBeforeDeactivation)

                if value < 0:
                    raise ValueError("negative value")
            except:
                error = "healthMonitor attemptsBeforeDeactivation attribute has an invalid value"
                error_list.append(error)   

        if "path" in healthmonitor:
            if monitortype == "CONNECT":
                error = "healthMonitor path attribute is not a valid attribute for a healthMonitor of type CONNECT"
                error_list.append(error) 

        if "statusRegex" in healthmonitor:
            if monitortype == "CONNECT":
                error = "healthMonitor statusRegex attribute is not a valid attribute for a healthMonitor of type CONNECT"
                error_list.append(error) 

        if "bodyRegex" in healthmonitor:
            if monitortype == "CONNECT":
                error = "healthMonitor bodyRegex attribute is not a valid attribute for a healthMonitor of type CONNECT"
                error_list.append(error) 




        return error_list
 

    def get_lbhealthmonitor_object_from_dictionary(self, dict_obj):

        if not isinstance(dict_obj, dict):
            self.logger.debug("Bad Request: We are expecting  a dictionary to be passed as a parameter")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body: expecting a healthMonitor object")  

        lbhealthmonitor = Utils.get_object_from_dictionary("healthMonitor", dict_obj, self)

        self.logger.debug("Exiting get_lbhealthmonitor_object_from_dictionary()")

        return lbhealthmonitor


    def get_lbhealthmonitor_object_from_request(self, req):
        dict_obj = Utils.get_dictionary_from_request(req, self.request_format)           

        if not isinstance(dict_obj, dict):
            self.logger.debug("Bad Request: The root element is not a dictionary")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body.")  

        dict_keys = dict_obj.keys()
 
        if "healthMonitor" in dict_keys:
            state = dict_obj["healthMonitor"]
            lbhealthmonitor = self.get_lbhealthmonitor_object_from_dictionary(state)
            return lbhealthmonitor
 
        else:
            self.logger.debug("Bad Request: The root element in the request is not \"healthMonitor\"")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body. expecting a healthMonitor object")  



    def Get(req, env, loadBalancerId): raise AssertionError()

    def Update(req, env, loadBalancerId, body): raise AssertionError()

    def Remove(req, env, loadBalancerId): raise AssertionError()

