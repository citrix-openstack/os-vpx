from webob import Request, Response

from openstack.lb.LBNodeState import LBNodeState
from openstack.lb.Utils import Utils

from openstack.common.BadRequestException import BadRequestException

class LBNode(object):

    def __init__(self, lbservice, lbresource=None):

        if not lbresource:
            self.lbresource = self
        else:
            self.lbresource = lbresource 
        Utils.init(lbservice)
        self.lbservice = lbservice
        self.logger = self.lbservice.logger  


    def init_request_environment(self, req, env):
        self.reqenv = self.lbservice.process_headers(req.headers)
        self.request_format = self.reqenv["request_format"]
        self.response_format = self.reqenv["response_format"]
        self.xmlnamespace = "http://docs.openstack.org/loadbalancers/api/v1.0"


    def GetStateObject(self):
        return LBNodeState(self.lbresource) 



    def get_element_stateobject(self, elementname):             

        if elementname == "node":
            return self.GetLBNode().GetStateObject()
             

        return None


    def get_listresponse(self, lbnodes, req):

        payload = Utils.get_response_body("nodes", lbnodes, self)

        response = Response(body=payload, request=req)

        response.status = "200 OK"
        response.content_type = Utils.get_mimetype_from_format(self.response_format)
        response.charset = 'utf8'
                
        return response


    def get_getresponse(self, lbnode, req):

        payload = Utils.get_response_body("node", lbnode, self)

        self.logger.debug("response payload: %s" % payload)

        response = Response(body=payload, request=req)

        response.status = "200 OK"
        response.content_type = Utils.get_mimetype_from_format(self.response_format)
        response.charset = 'utf8'
                
        return response


    def get_addresponse(self, lbnode, req):

       if isinstance(lbnode, list):  
           payload = Utils.get_response_body("nodes", lbnode, self)
       else:
           payload = Utils.get_response_body("node", lbnode, self)

       response = Response(body=payload, request=req)

       response.status = "202 Accepted"
       response.content_type = Utils.get_mimetype_from_format(self.response_format)
       response.charset = 'utf8'
                
       return response


    def get_updateresponse(self, lbnode, req):

        payload = Utils.get_response_body("node", lbnode, self)

        response = Response(request=req)
        response.status = "202 Accepted"
           
        """
        response = Response(body=payload, request=req)

        response.status = "202 Accepted"
        response.content_type = Utils.get_mimetype_from_format(self.response_format)
        response.charset = 'utf8'
        """        
        return response


    def get_removeresponse(self, req):
        response = Response(request=req)

        response.status = "202 Accepted"

        return response


    def validate_id_value(self, node):

        id = node.id

        """ We are not doing any validation on the address property """ 
        return None

    def validate_address_value(self, node):
        address = node.address

        """ We are not doing any validation on the address property """ 
        return None


    
    def validate_port_value(self, node):
        port = node.port

        try:
            port_val = int(port)
        except:
            error = "port property of node has an invalid value"
            return error

        return None


    def validate_weight_value(self, node):

        weight = node.weight

        try:
            weight_val = int(weight)
        except:
            error = "weight property of node has an invalid value"
            return error

        return None




    def validate_condition_value(self, node):

        condition = node.condition

        if condition == "ENABLED":
            return None

        if condition == "DISABLED":
            return None

        if condition == "DRAINING":
            return None

        error = "condition property of node has an invalid value"
        return error

        
 
    def validate_node_object_for_add(self, node):
        errors = []

        if "id" in node:
            if "address" in node or "port" in node:
                error = "A node can be designated by an id or an address/port but not both"
                errors.append(error)
                return errors

            error = self.validate_id_value(node)

            if error:
                errors.append(error)   
        else:
            if not "address" in node:
                error = "address property in node is missing"
                errors.append(error)
                return errors

            error = self.validate_address_value(node) 
        
            if error:
                errors.append(error)

            if not "port" in node and not "id" in node:
                error = "port property in node is missing"
                errors.append(error)
                return errors

            error = self.validate_port_value(node) 

            if error:
                errors.append(error)

        if "condition" in node:
            error = self.validate_condition_value(node)

            if error:
                errors.append(error)


        if "weight" in node:
            error = self.validate_weight_value(node)

            if error:
                errors.append(error)

        if "status" in node:
            error = "status is a read-only property. It cannot be updated."
            errors.append(error)

        return errors 



    def validate_node_object_for_update(self, node):
        errors = []
     
        if "address" in node:
            error = "address property of a node is immutable and cannot be updated"
            errors.append(error)


        if "port" in node:
            error = "port property of a node is immutable and cannot be updated"
            errors.append(error)

        if "condition" in node:
            error = self.validate_condition_value(node)

            if error:
                errors.append(error)

        if "weight" in node:
            error = self.validate_weight_value(node)

            if error:
                errors.append(error)

        if "status" in node:
            error = "status is a read-only property. It cannot be updated."
            errors.append(error)


        return errors 



    def get_lbnode_object_from_dictionary(self, dict_obj):

        if not isinstance(dict_obj, dict):
            self.logger.debug("Bad Request: We are expecting  a dictionary to be passed as a parameter")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body: expecting a node object")  

        lbnode = Utils.get_object_from_dictionary("node", dict_obj, self)

        self.logger.debug("Exiting get_lbnode_object_from_dictionary()")

        return lbnode
  



    def get_lbnode_objects_from_dictionary(self, dict_list):

        if not isinstance(dict_list, list):
            self.logger.debug("Bad Request: In Add(), lbnodes dict obj is expected to contain a list")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request: expecting a list of node objects")  

        lbnodes = []
  
        for item in dict_list:
            lbnode = self.get_lbnode_object_from_dictionary(item)
            lbnodes.append(lbnode)
               
        return lbnodes


    def get_lbnode_object_from_request(self, req):
        dict_obj = Utils.get_dictionary_from_request(req, self.request_format)           

        if not isinstance(dict_obj, dict):
            self.logger.debug("Bad Request: The root element is not a dictionary")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body.")  

        dict_keys = dict_obj.keys()
 
        if "node" in dict_keys:
            state = dict_obj["node"]
            lbnode = self.get_lbnode_object_from_dictionary(state)
            return lbnode
 
        else:
            self.logger.debug("Bad Request: The root element in the request is neither \"nodes\", nor \"node\"")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body. expecting a node object")  


    def get_lbnode_objects_from_request(self, req):

        dict_obj = Utils.get_dictionary_from_request(req, self.request_format)           

        dict_keys = dict_obj.keys()
 
        if "nodes" in dict_keys:
            state = dict_obj["nodes"]
            lbnodes = self.get_lbnode_objects_from_dictionary(state)
            return lbnodes


        elif "node" in dict_keys:
            state = dict_obj["node"]
            lbnode = self.get_lbnode_object_from_dictionary(state)
            return lbnode
 
        else:
            self.logger.debug("Bad Request: The root element in the request is neither \"loadBalancers\", nor \"loadBalancer\"")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body.")  




    def List(req, env, loadBalancerId): raise AssertionError()

    def Get(req, env, loadBalancerId, nodeId): raise AssertionError()

    def Add(req, env, loadBalancerId, body): raise AssertionError()

    def Update(req, env, loadBalancerId, nodeId, body): raise AssertionError()

    def Remove(req, env, loadBalancerId, nodeId): raise AssertionError()

