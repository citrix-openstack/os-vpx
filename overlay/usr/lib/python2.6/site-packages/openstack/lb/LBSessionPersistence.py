from openstack.lb.LBSessionPersistenceState import LBSessionPersistenceState
from openstack.lb.Utils import Utils

class LBSessionPersistence(object):

    def __init__(self, lbservice, lbresource=None):
        if not lbresource:
            self.lbresource = self
            Utils.init(lbservice)
        else:
            self.lbresource = lbresource 

        self.lbservice = lbservice
        self.logger = self.lbservice.logger  




    def GetStateObject(self):
        return LBSessionPersistenceState(self.lbresource) 

    def Get(loadBalancerId): raise AssertionError()
        
    def Set(loadBalancerId, body): raise AssertionError()
        
    def Remove(loadBalancerId): raise AssertionError()


    def validate_persistencetype_value(self, sessionpersistence):

        persistencetype = sessionpersistence.persistenceType

        sessionpersistence.persistenceType = persistencetype.upper()

        if sessionpersistence.persistenceType == "HTTP_COOKIE":
            return None

        error = "persistenceType attribute in sessionPersistence has an invalid value"

        return error

        
    def validate_sessionpersistence_object_for_add(self, sessionpersistence):

        errors = []
     
        if not "persistenceType" in sessionpersistence:
            error = "persistenceType attribute in sessionPersistence is missing"
            errors.append(error)
            return errors

        error = self.validate_persistencetype_value(sessionpersistence) 
        
        if error:
            errors.append(error)

        return errors 

        
    def validate_sessionpersistence_object_for_update(self, sessionpersistence):

        self.logger.debug("Validating sessionpersistence attributes for update operation")

        errors = []

        if "persistenceType" in sessionpersistence:
            error = self.validate_persistencetype_value(sessionpersistence) 
        
            if error:
                errors.append(error)


        return errors 

