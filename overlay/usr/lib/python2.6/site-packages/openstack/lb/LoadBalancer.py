from webob import Request, Response

from openstack.common.BadRequestException import BadRequestException

from openstack.lb.Utils import Utils
from openstack.lb.formatutils import toxml, tojson, get_payload_from_object, get_dictionary_from_payload

from openstack.lb.LoadBalancerState import LoadBalancerState

from openstack.lb.LBNode import LBNode
from openstack.lb.LBVirtualIP import LBVirtualIP
from openstack.lb.LBSessionPersistence import LBSessionPersistence
from openstack.lb.LBAccessList import LBAccessList
from openstack.lb.LBHealthMonitor import LBHealthMonitor
from openstack.lb.LBConnectionLogging import LBConnectionLogging
from openstack.lb.LBConnectionThrottle import LBConnectionThrottle
from openstack.lb.LBDate import LBDate
from openstack.lb.LBCluster import LBCluster


""" abstract class"""
""" This class should be extended by a real implementation class. Common features among all implementations reside in this abstract class. """
class LoadBalancer(object):


    def __init__(self, lbservice, lbresource=None):
        if not lbresource:
            self.lbresource = self
        else:
            self.lbresource = lbresource 

        Utils.init(lbservice)
        self.lbservice = lbservice
        self.logger = self.lbservice.logger  



    def init_request_environment(self, req, env):
        self.reqenv = self.lbservice.process_headers(req.headers)
        self.request_format = self.reqenv["request_format"]
        self.response_format = self.reqenv["response_format"]
        self.xmlnamespace = "http://docs.openstack.org/loadbalancers/api/v1.0"

    def GetStateObject(self):
        return LoadBalancerState(self) 

    def GetLBNode(self):
       return LBNode(lbservice=self.lbservice, lbresource=self.lbresource)


    def GetLBVirtualIP(self):
       return LBVirtualIP(lbservice=self.lbservice, lbresource=self.lbresource)


    def GetLBSessionPersistence(self):
       return LBSessionPersistence(lbservice=self.lbservice, lbresource=self.lbresource)


    def GetLBAccessList(self):
       return LBAccessList(lbservice=self.lbservice, lbresource=self.lbresource)


    def GetLBHealthMonitor(self):
       return LBHealthMonitor(lbservice=self.lbservice, lbresource=self.lbresource)


    def GetLBConnectionLogging(self):
       return LBConnectionLogging(lbservice=self.lbservice, lbresource=self.lbresource)


    def GetLBConnectionThrottle(self):
       return LBConnectionThrottle(lbservice=self.lbservice, lbresource=self.lbresource)


    def GetLBCreated(self):
       return LBDate(lbservice=self.lbservice, lbresource=self.lbresource)

    def GetLBUpdated(self):
       return LBDate(lbservice=self.lbservice, lbresource=self.lbresource)

    def GetLBCluster(self):
       return LBCluster(lbservice=self.lbservice, lbresource=self.lbresource)


    def List(self, req): raise AssertionError()           

    def Get(self, req, loadBalancerId): raise AssertionError()
        
    def Add(self, req): raise AssertionError()
       
    def Update(self, req, loadBalancerId, body): raise AssertionError()
        
    def Remove(self, req, loadBalancerId): raise AssertionError()   

    def Usage(self, req, loadBalancerId=None, period=None): raise AssertionError()

    def GetProtocols(self, req): raise AssertionError() 

    def GetAlgorithms(self, req): raise AssertionError()




    def validate_loadbalancer_object_for_add(self, loadBalancer):

        error_list = self._validate_loadbalancer_attributes_for_add_operation(loadBalancer)

        if error_list:
            badReq = BadRequestException("Validation fault", "object is not valid", error_list) 

            self.logger.debug("About to raise a BadRequest Exception with following attribute:\r\n \
                                message: %s \r\n \
                                detail: %s \r\n \
                                validationErrors: %s \r\n" % (badReq.message, badReq.detail, str(badReq.validationErrors))) 
            raise badReq



    def validate_loadbalancer_object_for_update(self, loadBalancer):

        error_list = self._validate_loadbalancer_attributes_for_update_operation(loadBalancer)

        return error_list



    def _validate_loadbalancer_attributes_for_add_operation(self, loadBalancer): 
       """ Here we check that:
             * all fields required in an ADD operation are present
             * all fields which are prohibited in an ADD operation are absent
       """

       error_list = []

       if not "name" in loadBalancer:
           error_list.append("\"name\" attribute for loadbalancer missing")
       else: 
           status, errors = loadBalancer.validate_name_value()
           if not status:
               error_list.extend(errors)
             
  
       if not "protocol" in loadBalancer:
           error_list.append("\"protocol\" attribute for loadbalancer missing")
       else:
            status, errors = loadBalancer.validate_protocol_value()
            if not status:
                error_list.extend(errors)

       if not "algorithm" in loadBalancer:
           error_list.append("\"algorithm\" attribute for loadbalancer missing")
       else:
           status, errors = loadBalancer.validate_algorithm_value()
           if not status:
               error_list.extend(errors)

       if not "port" in loadBalancer:
           error_list.append("\"port\" attribute for loadbalancer missing")
       else:
           status, errors = loadBalancer.validate_port_value()
           if not status:
               error_list.extend(errors)        

       if not "virtualIps" in loadBalancer:
           error_list.append("\"virtualIps\" attribute for loadbalancer missing")
       else:
           status, errors = loadBalancer.validate_virtualips_value()

           if not status:
               error_list.extend(errors)

           for virtualIP in loadBalancer.virtualIps:
               errors = self.GetLBVirtualIP().validate_virtualIP_object_for_add(virtualIP)
      
               if errors:
                   error_list.extend(errors)
   

       if "nodes" in loadBalancer:
           status, errors = loadBalancer.validate_nodes_value()

           if not status:
               error_list.extend(errors)   

           for node in loadBalancer.nodes:
               virtualIP  
               errors = self.GetLBNode().validate_node_object_for_add(node)
      
               if errors:
                   error_list.extend(errors)
     

       if "sessionPersistence" in loadBalancer:

           errors = self.GetLBSessionPersistence().validate_sessionpersistence_object_for_add(loadBalancer.sessionPersistence)

           if errors:
               error_list.extend(errors)



       if "healthMonitor" in loadBalancer:
           errors = self.GetLBHealthMonitor().validate_healthmonitor_object_for_add(loadBalancer.healthMonitor)

           if errors:
               error_list.extend(errors)


       if "connectionThrottle" in loadBalancer:
           errors = self.GetLBConnectionThrottle().validate_connectionthrottle_object_for_add(loadBalancer.connectionThrottle)

           if errors:
               error_list.extend(errors)




       if "connectionLogging" in loadBalancer:

           errors = self.GetLBConnectionLogging().validate_connectionlogging_object_for_add(loadBalancer.connectionLogging)

           if errors:
               error_list.extend(errors)


       """ The only attribute that you cannot specify on ADD is the \"id\" attribute, since this is returned as the result 
           of the creation """

       if loadBalancer.id != None:
           error_list.append("\"id\" property invalid for this operation")

       if loadBalancer.status != None:
           error_list.append("\"status\" property invalid for this operation")


       if loadBalancer.created != None:
           error_list.append("\"created\" property invalid for this operation")

       if loadBalancer.updated != None:
           error_list.append("\"updated\" property invalid for this operation")

       if loadBalancer.cluster != None:
           error_list.append("\"cluster\" property invalid for this operation")


       return error_list



    def _validate_loadbalancer_attributes_for_update_operation(self, loadBalancer):

       """ Here we check that:
             * all fields required in an UPDATE operation are present
             * all fields which are prohibited in an UPDATE operation are absent
       """

       self.logger.debug("Validating load balancer attributes for update operation")
 
       error_list = []

       if "name" in loadBalancer:
           status, errors = loadBalancer.validate_name_value()
           if not status:
               error_list.extend(errors)
               
       if "protocol" in loadBalancer:
            status, errors = loadBalancer.validate_protocol_value()
            if not status:
               error_list.extend(errors)

       if "algorithm" in loadBalancer:
           status, errors = loadBalancer.validate_algorithm_value()
           if not status:
               error_list.extend(errors)

       if "port" in loadBalancer:
           status, errors = loadBalancer.validate_port_value()
           if not status:
               error_list.extend(errors)        

       if "virtualIps" in loadBalancer:
           error = "You cannot update virtualIps of LoadBalancer" 
           error_list.append(error)
   

       if "nodes" in loadBalancer:
           error = "You cannot update nodes of LoadBalancer through this URL and method" 
           error_list.append(error)
     

       if "sessionPersistence" in loadBalancer:

           errors = self.GetLBSessionPersistence().validate_sessionpersistence_object_for_update(loadBalancer.sessionPersistence)

           if errors:
               error_list.extend(errors)


       if "connectionThrottle" in loadBalancer:
     
           errors = self.GetLBConnectionThrottle().validate_connectionthrottle_object_for_update(loadBalancer.connectionThrottle)

           if errors:
               error_list.extend(errors)


       if "connectionLogging" in loadBalancer:

           errors = self.GetLBConnectionLogging().validate_connectionlogging_object_for_update(loadBalancer.connectionLogging)

           if errors:
               error_list.extend(errors)


       """ The only attribute that you cannot specify on UPDATE is the \"id\" """

       if "id" in loadBalancer:
           error_list.append("\"id\" property invalid for this operation. \"id\" attribute for loadBalancer is expected in URL only")

       if loadBalancer.status != None:
           error_list.append("\"status\" property invalid for this operation")

       if loadBalancer.created != None:
           error_list.append("\"created\" property invalid for this operation")

       if loadBalancer.updated != None:
           error_list.append("\"updated\" property invalid for this operation")

       if loadBalancer.cluster != None:
           error_list.append("\"cluster\" property invalid for this operation")

       if loadBalancer.status != None:
           error_list.append("\"cluster\" property invalid for this operation")

       return error_list




    def GetLoadBalancer(self):
       return self


    def GetLBNode(self):
       return LBNode(lbservice=self.lbservice, lbresource=self.lbresource)

    def GetLBVirtualIP(self):
       return LBVirtualIP(lbservice=self.lbservice, lbresource=self.lbresource)

    def GetLBSessionPersistence(self):
       return LBSessionPersistence(lbservice=self.lbservice, lbresource=self.lbresource)

    def GetLBAccessList(self):
       return LBAccessList(lbservice=self.lbservice, lbresource=self.lbresource)

    def GetLBHealthMonitor(self):
       return LBHealthMonitor(lbservice=self.lbservice, lbresource=self.lbresource)

    def GetLBConnectionLogging(self):
       return LBConnectionLogging(lbservice=self.lbservice, lbresource=self.lbresource)

    def GetLBConnectionThrottle(self):
       return LBConnectionThrottle(lbservice=self.lbservice, lbresource=self.lbresource)


    def get_valid_listnames(self):

        elementlists = []

        elementlists.append("loadBalancers")
        elementlists.append("nodes")
        elementlists.append("virtualIps")

        return elementlists


    def get_element_stateobject(self, elementname):

        if elementname == "loadBalancer":
            return self.GetLoadBalancer().GetStateObject()
             

        if elementname == "node":
            return self.GetLBNode().GetStateObject()
             

        if elementname == "virtualIp":
            return self.GetLBVirtualIP().GetStateObject()
             

        if elementname == "sessionPersistence":
            return self.GetLBSessionPersistence().GetStateObject()
             

        if elementname == "accessList":
            return self.GetLBAccessList().GetStateObject()
             

        if elementname == "healthMonitor":
            return self.GetLBHealthMonitor().GetStateObject()
             

        if elementname == "connectionLogging":
            return self.GetLBConnectionLogging().GetStateObject()
             

        if elementname == "connectionThrottle":
            return self.GetLBConnectionThrottle().GetStateObject()
             
        if elementname == "created":
            return self.GetLBCreated().GetStateObject()
             

        if elementname == "updated":
            return self.GetLBUpdated().GetStateObject()

        if elementname == "cluster":
            return self.GetLBCluster().GetStateObject()


        return None




    def get_lbprotocols(self):

        lbprotocols = []  

        protocol = {}
        protocol["name"] = "HTTP"
        protocol["port"] = "80"
        lbprotocols.append(protocol)

        protocol = {}
        protocol["name"] = "FTP"
        protocol["port"] = "21"
        lbprotocols.append(protocol)

        protocol = {}
        protocol["name"] = "IMAPv4"
        protocol["port"] = "143"
        lbprotocols.append(protocol)

        protocol = {}
        protocol["name"] = "POP3"
        protocol["port"] = "110"
        lbprotocols.append(protocol)

        protocol = {}
        protocol["name"] = "SMTP"
        protocol["port"] = "25"
        lbprotocols.append(protocol)

        protocol = {}
        protocol["name"] = "LDAP"
        protocol["port"] = "389"
        lbprotocols.append(protocol)

        protocol = {}
        protocol["name"] = "HTTPS"
        protocol["port"] = "443"
        lbprotocols.append(protocol)

        protocol = {}
        protocol["name"] = "IMAPS"
        protocol["port"] = "993"
        lbprotocols.append(protocol)

        protocol = {}
        protocol["name"] = "POP3S"
        protocol["port"] = "995"
        lbprotocols.append(protocol)

        protocol = {}
        protocol["name"] = "LDAPS"
        protocol["port"] = "636"
        lbprotocols.append(protocol)


        return lbprotocols 


    
   
    def get_lbalgorithms(self):

        lbalgorithms = []

        algorithm = {}
        algorithm["name"] = "LEAST_CONNECTIONS"
        lbalgorithms.append(algorithm)

        algorithm = {}
        algorithm["name"] = "RANDOM"
        lbalgorithms.append(algorithm)


        algorithm = {}
        algorithm["name"] = "ROUND_ROBIN"
        lbalgorithms.append(algorithm)


        algorithm = {}
        algorithm["name"] = "WEIGHTED_LEAST_CONNECTIONS"
        lbalgorithms.append(algorithm)


        algorithm = {}
        algorithm["name"] = "WEIGHTED_ROUND_ROBIN"
        lbalgorithms.append(algorithm)


        return lbalgorithms



    def get_loadbalancer_object_from_dictionary(self, dict_obj):

        if not isinstance(dict_obj, dict):
            self.logger.debug("Bad Request: We are expecting  a dictionary to be passed as a parameter")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body. expecting a loadBalancer object")  

 
        loadBalancer = Utils.get_object_from_dictionary("loadBalancer", dict_obj, self)

        return loadBalancer
  

 
    def get_loadbalancer_objects_from_dictionary(self, dict_list):

        if not isinstance(dict_list, list):
            self.logger.debug("Bad Request: In Add(), loadBalancers dict obj is expected to contain a list")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request: expecting a list of loadBalancer objects")  

        loadbalancers = []
  
        for item in dict_list:
            loadbalancer = self.get_loadbalancer_object_from_dictionary(item)
            loadbalancers.append(loadbalancer)
               
        return loadbalancers


    def get_loadbalancer_object_from_request(self, req):
        dict_obj = Utils.get_dictionary_from_request(req, self.request_format)           

        if not isinstance(dict_obj, dict):
            self.logger.debug("Bad Request: The root element is not a dictionary")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body.")  

        dict_keys = dict_obj.keys()
 
        if "loadBalancer" in dict_keys:
            state = dict_obj["loadBalancer"]
            loadbalancer = self.get_loadbalancer_object_from_dictionary(state)
            return loadbalancer
 
        else:
            self.logger.debug("Bad Request: The root element in the request is neither \"loadBalancers\", nor \"loadBalancer\"")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body. object to add is not one loadBalancer or a list of loadBalancers")  


    def get_loadbalancer_objects_from_request(self, req):

        dict_obj = Utils.get_dictionary_from_request(req, self.request_format)           

        dict_keys = dict_obj.keys()
 
        if "loadBalancers" in dict_keys:
            state = dict_obj["loadBalancers"]
            loadbalancers = self.get_loadbalancer_objects_from_dictionary(state)
            return loadbalancers


        elif "loadBalancer" in dict_keys:
            state = dict_obj["loadBalancer"]
            loadbalancer = self.get_loadbalancer_object_from_dictionary(state)
            return loadbalancer
 
        else:
            self.logger.debug("Bad Request: The root element in the request is neither \"loadBalancers\", nor \"loadBalancer\"")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body. object to add is not one loadBalancer or a list of loadBalancers")  



    def get_listresponse(self, loadBalancers, req):

        payload = Utils.get_response_body("loadBalancers", loadBalancers, self)

        response = Response(body=payload, request=req)

        response.status = "200 OK"
        response.content_type = Utils.get_mimetype_from_format(self.response_format)
        response.charset = 'utf8'
                
        return response


    def get_getresponse(self, loadBalancer, req):

        payload = Utils.get_response_body("loadBalancer", loadBalancer, self)

        self.logger.debug("response payload: %s" % payload)

        response = Response(body=payload, request=req)

        response.status = "200 OK"
        response.content_type = Utils.get_mimetype_from_format(self.response_format)
        response.charset = 'utf8'
                
        return response


    def get_addresponse(self, loadBalancer, req):

       if isinstance(loadBalancer, list):  
           payload = Utils.get_response_body("loadBalancers", loadBalancer, self)
       else:
           payload = Utils.get_response_body("loadBalancer", loadBalancer, self)

       response = Response(body=payload, request=req)

       response.status = "202 Accepted"
       response.content_type = Utils.get_mimetype_from_format(self.response_format)
       response.charset = 'utf8'
                
       return response

     
    def get_updateresponse(self, loadBalancer, req):

        payload = Utils.get_response_body("loadBalancer", loadBalancer, self)

        """response = Response(body=payload, request=req)"""

        response = Response(request=req)
        response.status = "202 Accepted"

        """response.content_type = Utils.get_mimetype_from_format(self.response_format)
        response.charset = 'utf8'
        """
        
        return response


    def get_removeresponse(self, req):
        response = Response(request=req)

        response.status = "202 Accepted"

        return response


    def GetProtocols(self, req, env):
        self.init_request_environment(req, env)

        lbprotocols = self.get_lbprotocols()

        payload = Utils.get_response_body("protocols", lbprotocols, self)

        response = Response(body=payload, request=req)

        response.status = "200 OK"
        response.content_type = Utils.get_mimetype_from_format(self.response_format)
        response.charset = 'utf8'
                
        return response
        
              

        raise NotImplementedException("GET Protocols functionality not implemented") 

    def GetAlgorithms(self, req, env):
        self.init_request_environment(req, env)

        lbalgorithms = self.get_lbalgorithms()

        payload = Utils.get_response_body("algorithms", lbalgorithms, self)

        response = Response(body=payload, request=req)

        response.status = "200 OK"
        response.content_type = Utils.get_mimetype_from_format(self.response_format)
        response.charset = 'utf8'
                
        return response

