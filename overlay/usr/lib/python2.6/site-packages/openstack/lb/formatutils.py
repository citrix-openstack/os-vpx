import json
from xml.dom import minidom, Node
from lxml import etree

from openstack.common.odict import odict

def remove_whitespace_from_xml(xmlstr):
    parser = etree.XMLParser(remove_blank_text=True)
    elem = etree.XML(xmlstr, parser=parser)
    return etree.tostring(elem)


def fromxml(xmlstr, logger, plurals): 

    """mindom doesn't like whitespaces in an xml string"""
    """ so we'll first remove them """
    """ XXX - Need to move to use etree instead of minidom to avoid parsing twice""" 
    xmlstr = remove_whitespace_from_xml(xmlstr)  

    obj_dict = {}

    document = minidom.parseString(xmlstr)
    rootNode = document.documentElement



    obj_dict[str(rootNode.nodeName)] = xmltodict(rootNode, logger, plurals)


    return obj_dict



def xmltodict(parent, logger, plurals):   

    noAttributes = False

    obj_dict = {}
               
    attrs = parent.attributes
    
    parentName = parent.nodeName


    if attrs.keys() == None or len(attrs.keys()) == 0:
        noAttributes = True
    else:

        for attrName in attrs.keys():
            attrNode = attrs.get(attrName)
            attrValue = attrNode.nodeValue
            logger.debug("  " + attrName + " : " + attrValue)

            if attrName != "xmlns":  
                obj_dict[str(attrName)] = str(attrValue)
 
    for node in parent.childNodes:
        if node.nodeType == Node.ELEMENT_NODE:
            if node.nodeName in obj_dict.keys():   
	        if isinstance(obj_dict[node.nodeName], list):
	            obj_dict[str(node.nodeName)].append(xmltodict(node, logger, plurals))
	        else:
	            val = obj_dict[str(node.nodeName)]
	            obj_dict[str(node.nodeName)] = []
	            obj_dict[str(node.nodeName)].append(val)
	            obj_dict[str(node.nodeName)].append(xmltodict(node, logger, plurals)) 
                    logger.debug("obj_dict[" + str(node.nodeName) + "] = " + str(obj_dict[node.nodeName]))
            else:    
                obj_dict[str(node.nodeName)] = xmltodict(node, logger, plurals)
                logger.debug("obj_dict[" + str(node.nodeName) + "] = " + str(obj_dict[node.nodeName]))
        
                 
        else:
            logger.debug("Node  " + node.nodeName + " is not an element. It has type " + node.nodeType) 
            continue
          
         
    if noAttributes:
        """ We check if there is only one element in obj_dict and it is a list"""
        logger.debug("Node  " + parentName + " has no attributes")

        if len(obj_dict) == 1: 
             keylist = obj_dict.keys() 
             keyname = keylist[0]
                   
             logger.debug("child Node  " + keyname + " of parent node " + parentName)

             if plurals != None and keyname in plurals.keys():
                 if plurals[keyname] == parentName:
                     logger.debug(keyname + " is a singular of " + parentName)

                     if isinstance(obj_dict[keyname], list): 
                         logger.debug("obj_dict[" + str(keyname) + " is already a list ")
                         return obj_dict[keyname]

                     else:
                         obj_list = [obj_dict[keyname]] 
                         return obj_list
    else:
        logger.debug("Node  " + parentName + " has got attributes: " + str(attrs.keys()))

    logger.debug("Exiting xmltodict")
   
    return obj_dict




def toxml(attrname, attrval, logger, plurals, xmlnamespace=None, firstTime=False):

    output = ""

    if attrval == None:
        return output

    objtype = type(attrval).__name__

    if objtype == 'str' or objtype == 'int':
        output += "<" + attrname + ">" + attrval + "</" + attrname + ">"
        return output   

    logger.debug("objtype is: %s for attribute name %s" % (objtype, attrname)) 

    if objtype == 'unicode':
        attrval.encode('ascii','ignore')
        output += "<" + attrname + ">" + attrval + "</" + attrname + ">"
        return output   

    if objtype == 'list':

        output += "<" + attrname

        if firstTime and xmlnamespace:
            output += " xmlns=\"" + xmlnamespace + "\""
 
        output += ">"       
        name = None

        if attrval:      
            if plurals != None:
                singulars = dict(zip(plurals.values(), plurals.keys()))
                if attrname in singulars.keys():
                    name = singulars[attrname]

            if not name:
                name = attrname[0:-1]

            for item in attrval:
                output += toxml(name, item, logger, plurals)

        output += "</" + attrname + ">"

        return output

    if objtype == 'dict' or objtype == 'odict' or isinstance(attrval, object):
        output += "<" + attrname

        if firstTime and xmlnamespace:
            output += " xmlns=\"" + xmlnamespace + "\""

        complex_properties = odict() 

        for k in attrval:

            if k.startswith("_"):
                   continue

            v = attrval[k]

            valtype = type(v).__name__

            logger.debug("valtype of key %s is %s" % (k, valtype))
                
            if valtype == 'str':
               output += " " + k + "=" + "\"" + v + "\""
            elif valtype == 'int':
               output += " " + k + "=" + "\"" + str(v) + "\""
            else:
              complex_properties[k] = v  

        if complex_properties:
            output += ">"

            for k in complex_properties:
               v = complex_properties[k]
               output += toxml(k, v, logger, plurals)

            output += "</" + attrname + ">"
        else:
            output += "/>"

        return output

    return output
       

def fromjson(payload, logger, plurals):
    logger.debug("starting fromjson")
 
    obj_dict = json.loads(payload)

    logger.debug("dictionary from json payload: " + str(obj_dict))

    logger.debug("exiting fromjson")

    return obj_dict


def tojson(attrname, attrval, logger, plurals):

    output = ""

    if attrval == None:
        return output

    objtype = type(attrval).__name__

    logger.debug("objtype is: %s for attribute name %s" % (objtype, attrname)) 
 
    if objtype == 'str' or objtype == 'int':
        if attrname:
            output += "\"" + attrname + "\":"
 
        output += "\"" + attrval + "\","
        return output  

    if objtype == 'unicode':
        attrval.encode('ascii','ignore')
        if attrname:
            output += "\"" + attrname + "\":"
 
        output += "\"" + attrval + "\","
        return output  


    if objtype == 'list':
        if attrname:
            output += "\"" + attrname + "\":" 

        output += "["
             
        first = True

        if attrval:
            for item in attrval:
                if not first:
                    output += ","
                else:
                    first = False

                output += tojson(None, item, logger, plurals)

        output += "]"

        return output

    if objtype == 'dict' or objtype == 'odict' or isinstance(attrval, object):
        if attrname:
            output += "\"" + attrname + "\":" 

        output += "{" 
 
        first = True

        for k in attrval:

            if k.startswith("_"):
                   continue

            v = attrval[k]

            valtype = type(v).__name__

            if not first:
                comma = ","
            else:
                comma = ""   
                first = False

            if valtype == 'str' or valtype == 'int':

               output += comma + "\"" + k + "\":" + "\"" + v + "\""
            else:
               result = tojson(None, v, logger, plurals)
               if result:  
                   output += comma + "\"" + k + "\":" + result

        output += "}" 
 
        return output

    return output          



def get_payload_from_object(objname, obj, format, logger, plurals, namespace=None):

        if format == "json": 
            payload= "{" + tojson(objname, obj, logger, plurals) + "}"

        elif format == "xml":
            payload = "<?xml version=\"1.0\" ?>"
            payload += toxml(objname, obj, logger, plurals, xmlnamespace=namespace, firstTime=True)
        else:
            payload = ""       
     
        return payload  



def get_dictionary_from_payload(payload, format, logger, plurals):

        if format == "json": 
            obj = fromjson(payload, logger, plurals)

        elif format == "xml":
            obj = fromxml(payload, logger, plurals)
        else:
            obj = None       
     
        logger.debug("Exiting get_dictionary_from_payload")
 
        return obj

  


