from openstack.lb.LBVirtualIPState import LBVirtualIPState
from openstack.common.ImplementationErrorException import ImplementationErrorException
from openstack.lb.Utils import Utils

class LBVirtualIP(object):

    def __init__(self, lbservice, lbresource=None):

        if not lbresource:
            self.lbresource = self
            Utils.init(lbservice)
        else:
            self.lbresource = lbresource 

        self.lbservice = lbservice
        self.logger = self.lbservice.logger  


  
    def GetStateObject(self):
        return LBVirtualIPState(self.lbresource) 

    def List(loadBalancerId): raise AssertionError()

    def Get(loadBalancerId, nodeId): raise AssertionError()
        
    def Add(loadBalancerId, body): raise AssertionError()
        
    def Remove(loadBalancerId, virtualIpId): raise AssertionError()
        

    def validate_address_value(self, virtualIP):

        """ XXX We won't need to provide the VIP of the loadBalancer in the future """ 
        return None

    def validate_type_value(self, virtualIP):

        if virtualIP.type == "PUBLIC":
            return None

        if virtualIP.type == "SERVICENET":
            return None

        error = "Invalid value for type property in virtualIP"

        return error 


    def validate_virtualIP_object_for_add(self, virtualIP): 

        errors = []

        self.lbresource.logger.debug("virtualIP object to validate: %s" % virtualIP)
        self.lbresource.logger.debug("type of virtualIP object: %s" % str(type(virtualIP)))

        if virtualIP == None:
            raise ImplementationErrorException("programming error") 

        if "ipVersion" in virtualIP:
            error = "ipVersion property not a valid property of virtualIP"
            errors.append(error)


        if "address" in virtualIP:
            error = "address property not a valid property of virtualIP"
            errors.append(error)


        if "id" in virtualIP and ("type" in virtualIP):
            error = "id property cannot be used with type properties of virtualIP"
            errors.append(error)

        if not "type" in virtualIP and not "id" in virtualIP:
            error = "type or id property of virtualIP must be specified"
            errors.append(error)

        if "type" in virtualIP:
            error = self.validate_type_value(virtualIP)
 
            if error:
                errors.append(error)

        return errors


    def validate_virtualIP_object_for_update(self, virtualIP): 

        """ Updating virtualIP is not allowed """
  
        return None



