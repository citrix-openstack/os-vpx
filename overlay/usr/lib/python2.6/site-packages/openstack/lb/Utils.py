import inspect

from openstack.common.odict import odict

from openstack.common.BadRequestException import BadRequestException
from openstack.common.ServiceUnavailableException import ServiceUnavailableException
from openstack.common.ImplementationErrorException import ImplementationErrorException

from openstack.lb.formatutils import toxml, tojson, get_payload_from_object, get_dictionary_from_payload

class Utils(object):


    @staticmethod
    def init(lbservice):
        Utils.lbservice = lbservice 
        Utils.logger = lbservice.logger


  
    @staticmethod 
    def _get_class_for_element(elementname, class_mappings):

        Utils.logger.debug("Looking for a class for element %s: " % elementname)



        """loadBalancerObject.GetLBNode().GetSessionObject()"""

        if elementname not in class_mappings.keys():
            return None  

        modulename = class_mappings[elementname]["modulename"]   
        classname = class_mappings[elementname]["classname"]

        Utils.logger.debug("module name for element %s is %s: " % (elementname, modulename))
        Utils.logger.debug("class name for element %s is %s: " % (elementname, classname))

        module = __import__(modulename)

        parts = modulename.split('.')

        for comp in parts[1:]:
            module = getattr(module, comp)       

        attributes = dir(module)

        classobj = getattr(module, classname)

        return classobj


    @staticmethod
    def get_dictionary_from_request(req, request_format):

        lb_payload = req.body

        Utils.logger.debug("payload in request is: " + lb_payload)


        try:
            dict_obj = get_dictionary_from_payload(lb_payload, request_format, Utils.lbservice.logger, Utils.lbservice.plurals)
        except Exception:
            Utils.logger.debug("Bad Request: get_dictionary_from_payload() couldn't parse request payload")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body. Failed to parse")  
    
        if not dict_obj:
            Utils.logger.debug("Bad Request: get_dictionary_from_payload() returned an empty dict object")
            raise BadRequestException("Validation fault", "the object is not valid", "malformed request body. Failed to parse")  

        Utils.logger.debug("Exiting get_dictionary_from_request")

        return dict_obj



    @staticmethod
    def get_object_from_dictionary(nodename, dict_obj, context, parentnode=None): 

         
        stateobject = context.get_element_stateobject(nodename)

        if not stateobject:
            valid_lists = context.get_valid_listnames()
            if nodename in valid_lists:

                if Utils.lbservice.plurals != None:
                    singulars = dict(zip(Utils.lbservice.plurals.values(), Utils.lbservice.plurals.keys()))
                    singlename = singulars[nodename]
                else:
                    singlename = singulars[:-1]
                raise BadRequestException("Validation fault", "invalid object", "\"%s\" property is expected to be a list of \"%s\" elements" % (nodename, singlename))
            else: 
                raise BadRequestException("Validation fault", "invalid object", "\"%s\" is not a valid property of \"%s\"" % (nodename, parentnode))

        if not isinstance(dict_obj, dict):
            return None

        for key, val in dict_obj.items():

            if isinstance(val, basestring):
                try:
                    setattr(stateobject, str(key), str(val))
                except AttributeError:
                    Utils.logger.debug("Bad Request: Attribute %s is invalid for the obj %s" % (key, stateobject.__class__.__name__))
                    raise BadRequestException("Validation fault", "The object is not valid", "%s is not a property for object %s" % (key, nodename))
            elif isinstance(val, list):
                if Utils.lbservice.plurals != None:
                    singulars = dict(zip(Utils.lbservice.plurals.values(), Utils.lbservice.plurals.keys()))

                    if key in singulars.keys(): 
                        itemname = singulars[key]
                    else:
                        raise BadRequestException("Validation fault", "The object is not valid", "%s is not a recognized property in object %s" % (key, nodename))

                else:
                        raise ImplementationErrorException("We need to have a plurals dictionary")
 
                try:   
                    setattr(stateobject,str(key), [])
                except AttributeError:
                    Utils.logger.debug("Bad Request: %s is invalid for the obj %s" % (key, stateobject.__class__.__name__))
                    raise BadRequestException("Validation fault", "The object is not valid", 
                                              "%s is a not a recognized property of object %s" % (key, nodename))
              
                key_attr = getattr(stateobject,str(key))

                for item in val:
                    item_obj = Utils.get_object_from_dictionary(itemname, item, context, nodename)
                    key_attr.append(item_obj)
 
            elif isinstance(val, dict):            
                item_obj = Utils.get_object_from_dictionary(key, val, context, nodename)
                try:
                    setattr(stateobject,str(key), item_obj)
                except AttributeError:
                    Utils.logger.debug("Bad Request: Attribute %s is invalid for the obj %s" % (key, stateobject.__class__.__name__))
                    raise BadRequestException("Validation fault", "The object is not valid", 
                                              "%s is not a recognized property of object %s" % (key, nodename))

                continue 
             
        return stateobject


    @staticmethod
    def get_mimetype_from_format(format):
  
        if format == "xml":
            return "application/xml"

        if format == "atom":
            return "application/atom"

        if format == "json":
            return "application/json"

        raise Exception("Unrecognized format")


    @staticmethod
    def get_response_body(objectname, objectvalue, context):
          
        if objectvalue == None:
            self.logger.debug("objectvalue is None, so cannot generate response body...Not expecting this !! ")            
            raise ImplementationErrorException("programming error") 

        payload = get_payload_from_object(objectname, objectvalue, context.response_format, context.logger, context.lbservice.plurals, context.xmlnamespace)

        return payload 


 
