from openstack.common.odict import odict


class StateIterator:

    def __init__(self, dictionary, sorted_keys):
        self.dict = dictionary
        self.set_keys = dictionary.keys() 
        self.sorted_keys = sorted_keys  
  
        self.sorted_set_keys = []

        for key in self.sorted_keys:
            if key in self.set_keys:
                self.sorted_set_keys.append(key)
 
        self.offset = 0

    def next(self):
        if self.offset >= len(self.sorted_set_keys):
            raise StopIteration
        else:
            item = self.sorted_set_keys[self.offset]
            self.offset += 1
            return item

class State(object):

    def __init__(self, lbresource) :
        self.__dict__['_odict'] = odict()
        self._lbresource = lbresource
        self._properties = []

    def __getattr__(self, key) :
        if key in self.__dict__['_odict'].keys():
            return self.__dict__['_odict'][key]

        return None 

    def __setattr__(self, key, value) :

        if key == "_properties" or key == "_lbresource" or key in self._properties:
            self.__dict__['_odict'][key] = value
        else:
            raise AttributeError, key + " not allowed"

    def get_as_odict(self):
        return self._odict

    def get_as_dictionary(self):
        return self._odict

    def __getitem__(self, key):
        return self.__getattr__(key)

    def __iter__(self):
        return StateIterator(self._odict, self._properties)

    def __str__(self):
        output = ""

        for key, val in self.__dict__['_odict'].items():
            output += "\t%s: %s \r\n" % (str(key), str(val))

        return output 


